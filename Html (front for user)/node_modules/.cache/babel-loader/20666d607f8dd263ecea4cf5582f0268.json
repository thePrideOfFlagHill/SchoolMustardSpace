{"remainingRequest":"D:\\实践\\d2-admin-start-kit-master\\node_modules\\thread-loader\\dist\\cjs.js!D:\\实践\\d2-admin-start-kit-master\\node_modules\\babel-loader\\lib\\index.js!D:\\实践\\d2-admin-start-kit-master\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\实践\\d2-admin-start-kit-master\\src\\store\\modules\\d2admin\\modules\\page.js","dependencies":[{"path":"D:\\实践\\d2-admin-start-kit-master\\src\\store\\modules\\d2admin\\modules\\page.js","mtime":1587908413000},{"path":"D:\\实践\\d2-admin-start-kit-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\实践\\d2-admin-start-kit-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\实践\\d2-admin-start-kit-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\实践\\d2-admin-start-kit-master\\node_modules\\eslint-loader\\index.js","mtime":1588755592739}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}